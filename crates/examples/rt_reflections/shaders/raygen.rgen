#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform SceneData {
	mat4 invertedView;
	mat4 invertedProj;
	vec4 lightDirection;
	vec4 lightColor;
	uint maxDepth;
} scene;

layout(location = 0) rayPayloadEXT Payload {
	bool missed;
	bool reflective;
	vec3 hitValue;
	vec3 hitOrigin;
	vec3 hitNormal;
} payload;

void main() {
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	const vec2 d = (inUV * 2.0 - 1.0);

	vec3 origin = vec3(scene.invertedView * vec4(0, 0, 0, 1));
	vec3 target = normalize(vec3(scene.invertedProj * vec4(d.x, d.y, 1, 1)));
	vec3 direction = vec3(scene.invertedView * vec4(target, 0));

	const uint missIndex = 0;
	const float tmin = 0.001;
	const float tmax = 100.0;

    payload.hitValue = vec3(0.0);

	for(uint i = 0; i < scene.maxDepth; i++) {
		traceRayEXT(
			topLevelAS, 
			gl_RayFlagsOpaqueEXT, 
			0xff, 
			0, 0, 
			missIndex, 
			origin, 
			tmin, 
			direction, 
			tmax, 
			0
		);

		if (payload.missed || !payload.reflective) {
			break;
		}

		origin = payload.hitOrigin;
		direction = reflect(direction, payload.hitNormal);
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hitValue, 0.0));
}
