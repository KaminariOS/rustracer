#version 460
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
// https://developer.nvidia.com/blog/best-practices-for-using-nvidia-rtx-ray-tracing-updated/
// Any-hit shader
//
//Prefer unified and simplified any-hit shaders.
// An any-hit shader is potentially executed a lot during ray traversal,
// and it interrupts the hardware intersection search.
// The cost of any-hit shaders can have a significant effect on overall performance.
// I recommend having a unified and simplified any-hit shader in a ray-tracing pass.
// Also, the full register capacity of the GPU is not available for any-hit shaders, as part of it is consumed by the driver for storing the ray state.
//
//Optimize access to material data.
// In any-hit shaders, optimal access to material data is often crucial.
// A series of dependent memory accesses is a common pattern.
// Load vertex indices, vertex data, and sample textures.
// When possible, removing indirections from that path is beneficial.
//
//When blending, remember the undefined order of hits.
// Hits along ray are discovered and the corresponding any-hit shader invocations happen in undefined order.
// This means that the blending technique must be order-independent.
// It also means that to exclude hits beyond the closest opaque hit, ray distance must be limited properly.
// Additionally, you may need to flag the blended geometries with NO_DUPLICATE_ANYHIT_INVOCATION to ensure the correct results. For more information, see Chapter 9 in Ray Tracing Gems.

#include "lib/Random.glsl"
#include "lib/RayTracingCommons.glsl"
#include "lib/Material.glsl"

layout(binding = VERTEX_BIND, set = 0) readonly buffer Vertices { Vertex v[]; } vertices;
layout(binding = INDEX_BIND, set = 0) readonly buffer Indices { uint i[]; } indices;
layout(binding = MAT_BIND, set = 0) readonly buffer Materials { MaterialRaw m[]; } materials;
layout(binding = TEXTURE_BIND) uniform sampler2D[] textures;
layout(binding = GEO_BIND, set = 0) readonly buffer PrimInfos { PrimInfo p[]; } primInfos;
hitAttributeEXT vec2 HitAttributes;
rayPayloadInEXT ShadowRay Ray;

const uint OPAQUE = 1;
const uint MASK = 2;
const uint BLEND = 3;

// Performs an opacity test in any hit shader for potential hit. Returns true if hit point is transparent and can be ignored
bool testOpacityAnyHit() {
	// Load material at hit point

	const PrimInfo primInfo = primInfos.p[gl_InstanceCustomIndexEXT];
	const MaterialRaw mat = materials.m[primInfo.material_id];

	if (mat.alpha_mode == OPAQUE) {
		return false;
	}

	const uint vertexOffset = primInfo.v_offset;
	const uint indexOffset = primInfo.i_offset + (3 * gl_PrimitiveID);

	const uint i0 = vertexOffset + indices.i[indexOffset];
	const uint i1 = vertexOffset + indices.i[indexOffset + 1];
	const uint i2 = vertexOffset + indices.i[indexOffset + 2];

	const Vertex v0 = vertices.v[i0];
	const Vertex v1 = vertices.v[i1];
	const Vertex v2 = vertices.v[i2];



	// Compute the ray hit point properties.
	Vertex mix_vertex;
	getMixVertexAndGeoNormal(v0, v1, v2, vec2(HitAttributes), mix_vertex);
	vec4 uv0And1= mix_vertex.uv0And1;

	// Interpolate Color
	const vec4 baseColor = mat.baseColor;
	vec4 color4 = mix_vertex.color * baseColor;
	TextureInfo baseColorTexture = mat.baseColorTexture;
	if (baseColorTexture.index >= 0) {
		color4 *= texture(textures[baseColorTexture.index],
		getUV(uv0And1, baseColorTexture.coord)
		);
	}
	float opacity = color4.a;
	if (mat.workflow == SPECULAR_GLOSS_WORKFLOW) {
		SpecularGlossiness sg = mat.sg;
		vec4 diffuse_factor = sg.diffuse_factor;

		TextureInfo diffuse_texture = sg.diffuse_texture;
		if (diffuse_texture.index >= 0) {
			diffuse_factor *= texture(textures[diffuse_texture.index], getUV(uv0And1, diffuse_texture.coord));
		}
		color4 = mix_vertex.color * diffuse_factor;

		opacity = color4.a;
	}

	// Decide whether this hit is opaque or not according to chosen alpha testing mode
	if (mat.alpha_mode == MASK) {
//		When alphaMode is set to MASK the alphaCutoff property specifies the cutoff threshold. If the alpha value is greater than or equal to the alphaCutoff value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent. alphaCutoff value is ignored for other modes.
		return (opacity < mat.alpha_cutoff);
	} else {
		// Alpha blending mode
		float u = rand(Ray.rngState); // If you want alpha blending, there should be a random u. Semi-transparent things are, however, better rendered using refracted rays with real IoR
		return (opacity <= u);
	}
}

void main() {
		if (testOpacityAnyHit()) {
			ignoreIntersectionEXT;
		}
}
